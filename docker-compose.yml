version: '3.10'

services:
  backend:
    build: ./backend
    command: >
      sh -c "gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 2"
    volumes:
      - ./backend:/usr/src/app/
      - static_volume:/usr/src/app/api/static
      # - media_volume:/usr/src/app/media
      # - logs_volume:/usr/src/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - db
      - migration
    networks:
      - backend

  db:
    image: postgis/postgis:16-3.4
    restart: always
    environment:
      POSTGRES_DB: kyrgeo
      POSTGRES_USER: bagyshan
      POSTGRES_PASSWORD: 1
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - backend
    
  migration:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: on-failure
    command: >
      sh -c "python manage.py makemigrations && python manage.py migrate"
    volumes:
      - ./backend:/usr/src/app/
    depends_on:
      - db
    networks:
      - backend

  celery:
    build: ./backend
    command: celery -A config worker -l info
    volumes: 
      - ./backend:/usr/src/app/
    depends_on:
      - backend
      - redis
    networks:
      - backend

  redis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      - backend

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: "nginx"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - nginx_frontend_static_volume:/usr/share/nginx/html
      - static_volume:/usr/src/app/api/static
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - backend

  certbot:
    image: certbot/certbot
    container_name: "certbot"
    volumes:
      - ./certbot/conf:/etc/letsencrypt  # Для хранения сертификатов
      - ./certbot/www:/var/www/certbot   # Для временных файлов челленджа
    # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot certonly --webroot --webroot-path=/var/www/certbot -d kyrgyzgeology.kg -d www.kyrgyzgeology.kg --email kyrgyzgeology@yandex.com --agree-tos --no-eff-email --quiet --staging; sleep 12h & wait $!; done;'"
    command: certonly --webroot --webroot-path=/var/www/certbot --email kyrgyzgeology@yandex.com --agree-tos --no-eff-email -d kyrgyzgeology.kg -d www.kyrgyzgeology.kg; 1;
    networks:
      - backend
    depends_on:
      - nginx


  # nginx:
  #   depends_on:
  #     - backend
  #     - frontend
  #   restart: always
  #   build:
  #     dockerfile: Dockerfile
  #     context: ./nginx
  #   ports:
  #     - "80:80"


  # frontend:
  #   build: ./frontend
  #   # command: npm start
  #   ports:
  #     - "80:80"
  #   tty: true
  #   volumes:
  #     - ./frontend/:/usr/src/app/
  #     - node_modules:/usr/src/app/node_modules
  #   depends_on:
  #     - backend
  #   networks:
  #     - backend



  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "3000:80"
    container_name: "frontend"
    volumes:
      - ./frontend/default.conf:/etc/nginx/conf.d/default.conf
      - front_static_volume:/usr/src/app/static
      - static_volume:/usr/src/app/api/static
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://nginx/api/
    depends_on:
      - backend
    networks:
      - backend

  # frontend:
  #   stdin_open: true
  #   build:
  #     dockerfile: Dockerfile
  #     context: ./frontend
  #   volumes:
  #     - /app/node_modules
  #     - ./client:/app
  #   networks:
  #     - backend



volumes:
  postgres_data:
  static_volume:
  front_static_volume:
  nginx_frontend_static_volume:


networks:
  backend:

